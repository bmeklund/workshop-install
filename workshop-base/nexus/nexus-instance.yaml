apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nexus-pvc
  namespace: nexus
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: nexus-sa
  namespace: nexus
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus
  namespace: nexus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nexus
  strategy:
    type: Recreate
    terminationGracePeriodSeconds: 120
  template:
    metadata:
      labels:
        app: nexus
    spec:
      serviceAccountName: nexus-sa
      containers:
        - name: nexus
          image: docker.io/sonatype/nexus3:3.24.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8081
              protocol: TCP
            - containerPort: 5000
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: 8081
              scheme: HTTP
              initialDelaySeconds: 120  # Increase this
              periodSeconds: 15
              timeoutSeconds: 5
              failureThreshold: 10
          livenessProbe:
            httpGet:
              path: /
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              memory: 2Gi
              cpu: '2'
            limits:
              memory: 4Gi
              cpu: '2'
          volumeMounts:
            - name: nexus-data
              mountPath: /nexus-data
        - name: nexus-configurator
          image: curlimages/curl:latest
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for Nexus to be ready..."
              until curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/service/rest/v1/status | grep -q "200"; do
              echo "Nexus is not ready yet..."
              sleep 10
              done
              echo "Admin password is: $(cat /nexus-data/admin.password)"
              echo "Waiting for Nexus to initialize and create admin.password..."
              while [ ! -f /nexus-data/admin.password ]; do
                sleep 5
              done

              echo "Nexus is up. Reading default admin password..."
              ADMIN_PASS=$(cat /nexus-data/admin.password)

              echo "Enabling anonymous access..."
              curl -u admin:$ADMIN_PASS \
                -X PUT -H "Content-Type: application/json" \
                -d '{
                "enabled": true,
                "userId": "anonymous",
                "realmName": "NexusAuthorizingRealm"
                }' \
                http://localhost:8081/service/rest/v1/security/anonymous

              echo "Setting up repositories using REST API..."

              MAVEN_BASE="http://localhost:8081/service/rest/v1/repositories/maven"
              NPM_BASE="http://localhost:8081/service/rest/v1/repositories/npm"

              ########################################
              # Maven Repositories
              ########################################

              # Maven Central Proxy
              curl -u admin:$ADMIN_PASS -X POST $MAVEN_BASE/proxy \
                -H "Content-Type: application/json" \
                -d '{
                  "name": "maven-central",
                  "online": true,
                  "storage": {
                    "blobStoreName": "default",
                    "strictContentTypeValidation": true
                  },
                  "proxy": {
                    "remoteUrl": "https://repo1.maven.org/maven2/"
                  },
                  "negativeCache": {
                    "enabled": true,
                    "timeToLive": 1440
                  },
                  "httpClient": {
                    "blocked": false,
                    "autoBlock": true
                  },
                  "maven": {
                    "versionPolicy": "RELEASE",
                    "layoutPolicy": "PERMISSIVE"
                  }
                }'

              # RedHat GA Proxy
              curl -u admin:$ADMIN_PASS -X POST $MAVEN_BASE/proxy \
                -H "Content-Type: application/json" \
                -d '{
                  "name": "redhat-ga",
                  "online": true,
                  "storage": {
                    "blobStoreName": "default",
                    "strictContentTypeValidation": true
                  },
                  "proxy": {
                    "remoteUrl": "https://maven.repository.redhat.com/ga/"
                  },
                  "negativeCache": {
                    "enabled": true,
                    "timeToLive": 1440
                  },
                  "httpClient": {
                    "blocked": false,
                    "autoBlock": true
                  },
                  "maven": {
                    "versionPolicy": "RELEASE",
                    "layoutPolicy": "PERMISSIVE"
                  }
                }'

              # JBoss Proxy
              curl -u admin:$ADMIN_PASS -X POST $MAVEN_BASE/proxy \
                -H "Content-Type: application/json" \
                -d '{
                  "name": "jboss",
                  "online": true,
                  "storage": {
                    "blobStoreName": "default",
                    "strictContentTypeValidation": true
                  },
                  "proxy": {
                    "remoteUrl": "https://repository.jboss.org/nexus/content/groups/public"
                  },
                  "negativeCache": {
                    "enabled": true,
                    "timeToLive": 1440
                  },
                  "httpClient": {
                    "blocked": false,
                    "autoBlock": true
                  },
                  "maven": {
                    "versionPolicy": "RELEASE",
                    "layoutPolicy": "PERMISSIVE"
                  }
                }'

              # Maven Hosted Releases
              curl -u admin:$ADMIN_PASS -X POST $MAVEN_BASE/hosted \
                -H "Content-Type: application/json" \
                -d '{
                  "name": "releases",
                  "online": true,
                  "storage": {
                    "blobStoreName": "default",
                    "strictContentTypeValidation": true,
                    "writePolicy": "ALLOW_ONCE"
                  },
                  "component": {
                    "proprietaryComponents": false
                  },
                  "maven": {
                    "versionPolicy": "RELEASE",
                    "layoutPolicy": "STRICT"
                  }
                }'

              # Maven Group: maven-all-public
              curl -u admin:$ADMIN_PASS -X POST $MAVEN_BASE/group \
                -H "Content-Type: application/json" \
                -d '{
                  "name": "maven-all-public",
                  "online": true,
                  "storage": {
                    "blobStoreName": "default",
                    "strictContentTypeValidation": true
                  },
                  "group": {
                    "memberNames": [
                      "maven-central",
                      "redhat-ga",
                      "jboss"
                    ]
                  },
                  "maven": {
                    "versionPolicy": "RELEASE",
                    "layoutPolicy": "PERMISSIVE"
                  }
                }'

              ########################################
              # NPM Repositories
              ########################################

              # NPM Proxy: npm
              curl -u admin:$ADMIN_PASS -X POST $NPM_BASE/proxy \
                -H "Content-Type: application/json" \
                -d '{
                  "name": "npm",
                  "online": true,
                  "storage": {
                    "blobStoreName": "default",
                    "strictContentTypeValidation": true
                  },
                  "proxy": {
                    "remoteUrl": "https://registry.npmjs.org"
                  },
                  "negativeCache": {
                    "enabled": true,
                    "timeToLive": 1440
                  },
                  "httpClient": {
                    "blocked": false,
                    "autoBlock": true
                  }
                }'

              # NPM Group: npm-all
              curl -u admin:$ADMIN_PASS -X POST $NPM_BASE/group \
                -H "Content-Type: application/json" \
                -d '{
                  "name": "npm-all",
                  "online": true,
                  "storage": {
                    "blobStoreName": "default",
                    "strictContentTypeValidation": true
                  },
                  "group": {
                    "memberNames": ["npm"]
                  }
                }'

              echo "All Maven and NPM repositories created successfully!"
              echo "Done configuring Nexus."
          volumeMounts:
            - name: nexus-data
              mountPath: /nexus-data
      volumes:
        - name: nexus-data
          persistentVolumeClaim:
            claimName: nexus-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-registry
  namespace: nexus
  labels:
    app: nexus
spec:
  selector:
    app: nexus
  ports:
  - name: nexus-registry-tcp
    port: 5000
    protocol: TCP
    targetPort: 5000
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    console.alpha.openshift.io/overview-app-route: "false"
  name: nexus-registry
  namespace: nexus
  labels:
    app: nexus
spec:
  to:
    kind: Service
    name: nexus-registry
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge